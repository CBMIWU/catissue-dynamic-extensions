
package edu.common.dynamicextensions.util;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.net.URL;

import javax.xml.bind.JAXBException;

import org.xml.sax.SAXException;

import edu.common.dynamicextensions.exception.DynamicExtensionsSystemException;
import edu.common.dynamicextensions.util.xml.XMLToObjectConverter;
import edu.wustl.common.util.global.ApplicationProperties;
import edu.wustl.common.util.logger.Logger;
import edu.wustl.common.util.logger.LoggerConfig;

public class XMLUtility
{

	static
	{
		LoggerConfig.configureLogger(System.getProperty("user.dir"));
	}

	/** The Constant LOGGER. */
	private static final Logger LOGGER = Logger.getCommonLogger(XMLUtility.class);

	/**
	 * This method parses the given XML and returns the Java POJO corresponding to the XML provided.
	 *
	 * @param xmlFileName the xml file name
	 * @param fileDirectory the file directory
	 * @param packageName the package name
	 * @param xsdFileName the xsd file name
	 *
	 * @return the Java object
	 *
	 * @throws DynamicExtensionsSystemException the dynamic extensions system exception.
	 * @throws SAXException while parsing wrong XML.
	 */
	public static Object getJavaObjectForXML(String xmlFileName, String fileDirectory,
			String packageName, String xsdFileName) throws DynamicExtensionsSystemException,
			SAXException
	{
		final FileReader fileReader = new FileReader(xmlFileName, fileDirectory);
		return getJavaObjectForXML(packageName, xsdFileName, fileReader.getFilePath());
	}

	public static Object getJavaObjectForXML(String packageName, String xsdFileName,
			String filePath) throws SAXException, DynamicExtensionsSystemException
	{
		try
		{
			// Creates URL of the XSD specified.
			URL xsdFileUrl = Thread.currentThread().getContextClassLoader()
					.getResource(xsdFileName);

			// Instantiate the Converter class which calls the Object factory generated by JAXB.
			XMLToObjectConverter converter = new XMLToObjectConverter(packageName, xsdFileUrl);

			// Read the XML file and create fileReader object
			

			// Parse the XML and create Permissible Values POJO
			return converter.getJavaObject(new FileInputStream(filePath));
		}
		catch (JAXBException e)
		{
			LOGGER.error(ApplicationProperties.getValue("jaxb.error"), e);
			throw new DynamicExtensionsSystemException(
					ApplicationProperties.getValue("jaxb.error"), e);
		}
		catch (FileNotFoundException e)
		{
			LOGGER.error(ApplicationProperties.getValue("jaxb.filenotfound.error"), e);
			throw new DynamicExtensionsSystemException(ApplicationProperties
					.getValue("jaxb.filenotfound.error"), e);
		}
		// This exception is throw when in a given XML string is given instead of integer
		catch (NumberFormatException e)
		{
			LOGGER.error(ApplicationProperties.getValue("jaxb.parse.error"), e);
			throw new DynamicExtensionsSystemException(ApplicationProperties
					.getValue("jaxb.parse.error"), e);
		}
	}
}
